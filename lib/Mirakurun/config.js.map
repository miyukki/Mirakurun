{"version":3,"sources":["Mirakurun/config.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;EAcE;AACF,iDAAiD;AACjD,YAAY,CAAC;AAEb,MAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,MAAY,IAAI,WAAM,SAAS,CAAC,CAAA;AAEhC,MAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AA0D7B;IACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAChD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAED,oBAA2B,IAAY;IACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACtD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAED;IACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAChD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAED,oBAA2B,IAAa;IACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACtD,CAAC;AAFe,kBAAU,aAEzB,CAAA;AAED;IACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAClD,CAAC;AAFe,oBAAY,eAE3B,CAAA;AAED,sBAA6B,IAAe;IACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;AACxD,CAAC;AAFe,oBAAY,eAE3B,CAAA;AAED,cAAc,IAAI;IAEd,GAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAEpC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AACxD,CAAC;AAED,cAAc,IAAI,EAAE,IAAI;IAEpB,GAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAEpC,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;QAErC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG;YAEvC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;YAED,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC","file":"Mirakurun/config.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as fs from \"fs\";\r\nimport * as yaml from \"js-yaml\";\r\nimport * as common from \"./common\";\r\nimport * as log from \"./log\";\r\n\r\nexport interface Server {\r\n    // as Local Server\r\n    path?: string;\r\n\r\n    // as Remote Server\r\n    port?: number;\r\n\r\n    logLevel?: log.LogLevel;\r\n\r\n    /** Byte */\r\n    highWaterMark?: number;\r\n    /** Milliseconds */\r\n    overflowTimeLimit?: number;\r\n\r\n    programGCInterval?: number;\r\n    epgGatheringInterval?: number;\r\n    epgRetrievalTime?: number;\r\n}\r\n\r\nexport interface Tuner {\r\n    name: string;\r\n\r\n    // GR / BS / CS / SKY\r\n    types: common.ChannelType[];\r\n\r\n    // for chardev / dvb\r\n    command?: string;\r\n\r\n    // for dvb\r\n    dvbDevicePath?: string;\r\n\r\n    // decoder\r\n    decoder?: string;\r\n\r\n    // special flags\r\n    isPT2?: boolean;\r\n\r\n    isDisabled?: boolean;\r\n}\r\n\r\nexport interface Channel {\r\n    name: string;\r\n\r\n    // GR / BS / CS / SKY\r\n    type: common.ChannelType;\r\n\r\n    // passed to tuning command\r\n    channel: string;\r\n    satelite?: string;\r\n\r\n    // service id\r\n    serviceId?: number;\r\n\r\n    isDisabled?: boolean;\r\n}\r\n\r\nexport function loadServer(): Server {\r\n    return load(process.env.SERVER_CONFIG_PATH);\r\n}\r\n\r\nexport function saveServer(data: Server): Promise<void> {\r\n    return save(process.env.SERVER_CONFIG_PATH, data);\r\n}\r\n\r\nexport function loadTuners(): Tuner[] {\r\n    return load(process.env.TUNERS_CONFIG_PATH);\r\n}\r\n\r\nexport function saveTuners(data: Tuner[]): Promise<void> {\r\n    return save(process.env.TUNERS_CONFIG_PATH, data);\r\n}\r\n\r\nexport function loadChannels(): Channel[] {\r\n    return load(process.env.CHANNELS_CONFIG_PATH);\r\n}\r\n\r\nexport function saveChannels(data: Channel[]): Promise<void> {\r\n    return save(process.env.CHANNELS_CONFIG_PATH, data);\r\n}\r\n\r\nfunction load(path) {\r\n\r\n    log.debug(\"load config `%s`\", path);\r\n\r\n    return yaml.safeLoad(fs.readFileSync(path, \"utf8\"));\r\n}\r\n\r\nfunction save(path, data): Promise<void> {\r\n\r\n    log.debug(\"save config `%s`\", path);\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n\r\n        fs.writeFile(path, yaml.safeDump(data), err => {\r\n\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    });\r\n}"],"sourceRoot":"/source/"}