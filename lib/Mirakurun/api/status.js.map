{"version":3,"sources":["Mirakurun/api/status.ts"],"names":[],"mappings":"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","file":"Mirakurun/api/status.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\"use strict\";\r\n\r\nimport { Operation } from \"express-openapi\";\r\nimport * as api from \"../api\";\r\nimport { Status } from \"../../../api.d.ts\";\r\nimport status from \"../status\";\r\nimport Program from \"../Program\";\r\nimport Tuner from \"../Tuner\";\r\n\r\nexport const get: Operation = (req, res) => {\r\n\r\n    const ret: Status = {\r\n        process: {\r\n            arch: process.arch,\r\n            platform: process.platform,\r\n            versions: process.versions,\r\n            pid: process.pid,\r\n            memoryUsage: process.memoryUsage()\r\n        },\r\n        epg: {\r\n            gatheringNetworks: [],\r\n            storedEvents: Program.all().length\r\n        },\r\n        streamCount: {\r\n            tunerDevice: Tuner.all().filter(td => td.isUsing === true).length,\r\n            tsFilter: status.streamCount.tsFilter,\r\n            decoder: status.streamCount.decoder\r\n        },\r\n        errorCount: status.errorCount,\r\n        timerAccuracy: {\r\n            // ns → μs\r\n            last: status.timerAccuracy.last / 1000,\r\n            m1: {\r\n                avg: (status.timerAccuracy.m1.reduce((a, b) => a + b) / status.timerAccuracy.m1.length) / 1000,\r\n                min: Math.min.apply(null, status.timerAccuracy.m1) / 1000,\r\n                max: Math.max.apply(null, status.timerAccuracy.m1) / 1000\r\n            },\r\n            m5: {\r\n                avg: (status.timerAccuracy.m5.reduce((a, b) => a + b) / status.timerAccuracy.m5.length) / 1000,\r\n                min: Math.min.apply(null, status.timerAccuracy.m5) / 1000,\r\n                max: Math.max.apply(null, status.timerAccuracy.m5) / 1000\r\n            },\r\n            m15: {\r\n                avg: (status.timerAccuracy.m15.reduce((a, b) => a + b) / status.timerAccuracy.m15.length) / 1000,\r\n                min: Math.min.apply(null, status.timerAccuracy.m15) / 1000,\r\n                max: Math.max.apply(null, status.timerAccuracy.m15) / 1000\r\n            }\r\n        }\r\n    };\r\n\r\n    for (let nid in status.epg) {\r\n        if (status.epg[nid] === true) {\r\n            ret.epg.gatheringNetworks.push(parseInt(nid, 10));\r\n        }\r\n    }\r\n\r\n    res.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\r\n    res.status(200);\r\n    res.end(JSON.stringify(ret, null, 2));\r\n};\r\n\r\nget.apiDoc = {\r\n    tags: [\"status\"],\r\n    operationId: \"getStatus\",\r\n    responses: {\r\n        200: {\r\n            description: \"OK\",\r\n            schema: {\r\n                $ref: \"#/definitions/Status\"\r\n            }\r\n        },\r\n        default: {\r\n            description: \"Unexpected Error\",\r\n            schema: {\r\n                $ref: \"#/definitions/Error\"\r\n            }\r\n        }\r\n    }\r\n};"],"sourceRoot":"/source/"}