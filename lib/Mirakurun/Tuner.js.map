{"version":3,"sources":["Mirakurun/Tuner.ts"],"names":[],"mappings":"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","file":"Mirakurun/Tuner.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as child_process from \"child_process\";\r\nimport * as stream from \"stream\";\r\nimport * as common from \"./common\";\r\nimport * as log from \"./log\";\r\nimport _ from \"./_\";\r\nimport status from \"./status\";\r\nimport db from \"./db\";\r\nimport TunerDevice from \"./TunerDevice\";\r\nimport ChannelItem from \"./ChannelItem\";\r\nimport ServiceItem from \"./ServiceItem\";\r\nimport ProgramItem from \"./ProgramItem\";\r\nimport TSFilter from \"./TSFilter\";\r\n\r\ninterface StreamSetting {\r\n    channel: ChannelItem;\r\n    networkId?: number;\r\n    serviceId?: number;\r\n    eventId?: number;\r\n    noProvide?: boolean;\r\n    parseSDT?: boolean;\r\n    parseEIT?: boolean;\r\n}\r\n\r\nexport default class Tuner {\r\n\r\n    private _devices: TunerDevice[] = [];\r\n\r\n    constructor() {\r\n\r\n        this._load();\r\n\r\n        _.tuner = this;\r\n    }\r\n\r\n    get devices(): TunerDevice[] {\r\n        return this._devices;\r\n    }\r\n\r\n    get(index: number): TunerDevice {\r\n\r\n        for (let i = 0, l = this._devices.length; i < l; i++) {\r\n            if (this._devices[i].index === index) {\r\n                return this._devices[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    typeExists(type: common.ChannelType): boolean {\r\n\r\n        for (let i = 0, l = this._devices.length; i < l; i++) {\r\n            if (this._devices[i].config.types.indexOf(type) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getChannelStream(channel: ChannelItem, user: common.User): Promise<stream.Readable> {\r\n\r\n        let networkId;\r\n\r\n        const services = channel.getServices();\r\n        if (services.length !== 0) {\r\n            networkId = services[0].networkId;\r\n        }\r\n\r\n        const setting: StreamSetting = {\r\n            channel: channel,\r\n            networkId: networkId,\r\n            parseEIT: true\r\n        };\r\n\r\n        return this._getStream(setting, user);\r\n    }\r\n\r\n    getServiceStream(service: ServiceItem, user: common.User): Promise<stream.Readable> {\r\n\r\n        const setting: StreamSetting = {\r\n            channel: service.channel,\r\n            serviceId: service.serviceId,\r\n            networkId: service.networkId,\r\n            parseEIT: true\r\n        };\r\n\r\n        return this._getStream(setting, user);\r\n    }\r\n\r\n    getProgramStream(program: ProgramItem, user: common.User): Promise<stream.Readable> {\r\n\r\n        const setting: StreamSetting = {\r\n            channel: program.service.channel,\r\n            serviceId: program.data.serviceId,\r\n            eventId: program.data.eventId,\r\n            networkId: program.data.networkId,\r\n            parseEIT: true\r\n        };\r\n\r\n        return this._getStream(setting, user);\r\n    }\r\n\r\n    getEPG(channel: ChannelItem, time?: number): Promise<void> {\r\n\r\n        if (!time) {\r\n            time = _.config.server.epgRetrievalTime || 1000 * 60 * 10;\r\n        }\r\n\r\n        let networkId;\r\n\r\n        const services = channel.getServices();\r\n        if (services.length !== 0) {\r\n            networkId = services[0].networkId;\r\n        }\r\n\r\n        const setting: StreamSetting = {\r\n            channel: channel,\r\n            networkId: networkId,\r\n            noProvide: true,\r\n            parseEIT: true\r\n        };\r\n\r\n        const user: common.User = {\r\n            id: \"Mirakurun:getEPG()\",\r\n            priority: -1,\r\n            disableDecoder: true\r\n        };\r\n\r\n        return this._getStream(setting, user)\r\n            .then(stream => {\r\n                return new Promise<void>((resolve) => {\r\n                    setTimeout(() => stream.emit(\"close\"), time);\r\n                    stream.once(\"epgReady\", () => stream.emit(\"close\"));\r\n                    stream.once(\"close\", resolve);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    getServices(channel: ChannelItem): Promise<db.Service[]> {\r\n\r\n        const setting: StreamSetting = {\r\n            channel: channel,\r\n            noProvide: true,\r\n            parseSDT: true\r\n        };\r\n\r\n        const user: common.User = {\r\n            id: \"Mirakurun:getServices()\",\r\n            priority: -1,\r\n            disableDecoder: true\r\n        };\r\n\r\n        return this._getStream(setting, user)\r\n            .then(stream => {\r\n                return new Promise((resolve, reject) => {\r\n\r\n                    let services: db.Service[] = null;\r\n\r\n                    setTimeout(() => stream.emit(\"close\"), 10000);\r\n\r\n                    stream.once(\"services\", _services => {\r\n                        services = _services;\r\n                        stream.emit(\"close\");\r\n                    });\r\n\r\n                    stream.once(\"close\", () => {\r\n\r\n                        stream.removeAllListeners(\"services\");\r\n\r\n                        if (services === null) {\r\n                            reject(new Error(\"stream has closed before get services\"));\r\n                        } else {\r\n                            resolve(services);\r\n                        }\r\n                    });\r\n                });\r\n            })\r\n            .catch(error => {\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    private _load(): this {\r\n\r\n        log.debug(\"loading tuners...\");\r\n\r\n        const tuners = _.config.tuners;\r\n\r\n        tuners.forEach((tuner, i) => {\r\n\r\n            if (!tuner.name || !tuner.types || !tuner.command) {\r\n                log.error(\"missing required property in tuner#%s configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (typeof tuner.name !== \"string\") {\r\n                log.error(\"invalid type of property `name` in tuner#%s configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (Array.isArray(tuner.types) === false) {\r\n                console.log(tuner);\r\n                log.error(\"invalid type of property `types` in tuner#%s configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (typeof tuner.command !== \"string\") {\r\n                log.error(\"invalid type of property `command` in tuner#%s configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (tuner.dvbDevicePath && typeof tuner.dvbDevicePath !== \"string\") {\r\n                log.error(\"invalid type of property `dvbDevicePath` in tuner#%s configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (tuner.isDisabled) {\r\n                return;\r\n            }\r\n\r\n            this._devices.push(\r\n                new TunerDevice(i, tuner)\r\n            );\r\n        });\r\n\r\n        log.info(\"%s of %s tuners loaded\", this._devices.length, tuners.length);\r\n\r\n        return this;\r\n    }\r\n\r\n    private _getStream(setting: StreamSetting, user: common.User): Promise<stream.Readable> {\r\n\r\n        return new Promise<stream.Readable>((resolve, reject) => {\r\n\r\n            const devices = this._getDevicesByType(setting.channel.type);\r\n\r\n            let tryCount = 20;\r\n            const length = devices.length;\r\n\r\n            function find() {\r\n\r\n                let device: TunerDevice = null;\r\n\r\n                // 1. join to existing\r\n                for (let i = 0; i < length; i++) {\r\n                    if (devices[i].isAvailable === true && devices[i].channel === setting.channel) {\r\n                        device = devices[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // 2. start as new\r\n                if (device === null) {\r\n                    for (let i = 0; i < length; i++) {\r\n                        if (devices[i].isFree === true) {\r\n                            device = devices[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 3. replace existing\r\n                if (device === null) {\r\n                    for (let i = 0; i < length; i++) {\r\n                        if (devices[i].isAvailable === true && devices[i].users.length === 0) {\r\n                            device = devices[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 4. takeover existing\r\n                if (device === null) {\r\n                    for (let i = 0; i < length; i++) {\r\n                        if (devices[i].isUsing === true && devices[i].getPriority() < user.priority) {\r\n                            device = devices[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (device === null) {\r\n                    --tryCount;\r\n                    if (tryCount > 0) {\r\n                        setTimeout(find, 250);\r\n                    } else {\r\n                        reject(new Error(\"no available tuners\"));\r\n                    }\r\n                } else {\r\n                    const tsFilter = new TSFilter({\r\n                        networkId: setting.networkId,\r\n                        serviceId: setting.serviceId,\r\n                        eventId: setting.eventId,\r\n                        noProvide: setting.noProvide,\r\n                        parseSDT: setting.parseSDT,\r\n                        parseEIT: setting.parseEIT\r\n                    });\r\n\r\n                    device.startStream(user, tsFilter, setting.channel)\r\n                        .then(() => {\r\n                            if (user.disableDecoder === true || device.decoder === null) {\r\n                                resolve(tsFilter);\r\n                            } else {\r\n                                const decoder = child_process.spawn(device.decoder);\r\n                                ++status.streamCount.decoder;\r\n                                decoder.stderr.pipe(process.stderr);\r\n                                decoder.stdout.once(\"close\", () => {\r\n                                    tsFilter.emit(\"close\");\r\n                                    --status.streamCount.decoder;\r\n                                });\r\n                                tsFilter.once(\"close\", () => decoder.kill(\"SIGKILL\"));\r\n                                tsFilter.pipe(decoder.stdin);\r\n                                resolve(decoder.stdout);\r\n                            }\r\n                        })\r\n                        .catch((err) => {\r\n                            tsFilter.emit(\"close\");\r\n                            reject(err);\r\n                        });\r\n                }\r\n            }\r\n            find();\r\n        });\r\n    }\r\n\r\n    private _getDevicesByType(type: common.ChannelType): TunerDevice[] {\r\n\r\n        const devices = [];\r\n\r\n        for (let i = 0, l = this._devices.length; i < l; i++) {\r\n            if (this._devices[i].config.types.indexOf(type) !== -1) {\r\n                devices.push(this._devices[i]);\r\n            }\r\n        }\r\n\r\n        return devices;\r\n    }\r\n\r\n    static all(): TunerDevice[] {\r\n        return _.tuner.devices;\r\n    }\r\n\r\n    static get(index: number): TunerDevice {\r\n        return _.tuner.get(index);\r\n    }\r\n\r\n    static typeExists(type: common.ChannelType): boolean {\r\n        return _.tuner.typeExists(type);\r\n    }\r\n\r\n    static getChannelStream(channel: ChannelItem, user: common.User): Promise<stream.Readable> {\r\n        return _.tuner.getChannelStream(channel, user);\r\n    }\r\n\r\n    static getServiceStream(service: ServiceItem, user: common.User): Promise<stream.Readable> {\r\n        return _.tuner.getServiceStream(service, user);\r\n    }\r\n\r\n    static getProgramStream(program: ProgramItem, user: common.User): Promise<stream.Readable> {\r\n        return _.tuner.getProgramStream(program, user);\r\n    }\r\n\r\n    static getEPG(channel: ChannelItem, time?: number): Promise<void> {\r\n        return _.tuner.getEPG(channel, time);\r\n    }\r\n\r\n    static getServices(channel: ChannelItem): Promise<db.Service[]> {\r\n        return _.tuner.getServices(channel);\r\n    }\r\n}"],"sourceRoot":"/source/"}