{"version":3,"sources":["Mirakurun/ProgramItem.ts"],"names":[],"mappings":"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","file":"Mirakurun/ProgramItem.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as stream from \"stream\";\r\nimport * as common from \"./common\";\r\nimport * as log from \"./log\";\r\nimport _ from \"./_\";\r\nimport db from \"./db\";\r\nimport Event from \"./Event\";\r\nimport ChannelItem from \"./ChannelItem\";\r\nimport ServiceItem from \"./ServiceItem\";\r\n\r\nexport default class ProgramItem {\r\n\r\n    constructor(private _data: db.Program, firstAdd = false) {\r\n\r\n        if (_.program.exists(_data.id) === true) {\r\n            const item = _.program.get(_data.id);\r\n            item.update(_data);\r\n            return item;\r\n        }\r\n\r\n        const removedIds = [];\r\n\r\n        if (firstAdd === false) {\r\n            _.program.findConflicts(\r\n                _data.networkId,\r\n                _data.serviceId,\r\n                _data.startAt,\r\n                _data.startAt + _data.duration\r\n            ).forEach(item => {\r\n\r\n                item.remove();\r\n\r\n                log.debug(\r\n                    \"ProgramItem#%d (networkId=%d, eventId=%d) has removed for redefine to ProgramItem#%d (eventId=%d)\",\r\n                    item.data.id, item.data.networkId, item.data.eventId,\r\n                    _data.id, _data.eventId\r\n                );\r\n\r\n                removedIds.push(item.data.id);\r\n            });\r\n        }\r\n\r\n        _.program.add(this);\r\n\r\n        if (firstAdd === false) {\r\n            Event.emit(\"program\", \"create\", this._data);\r\n            removedIds.forEach(id => Event.emit(\"program\", \"redefine\", { from: id, to: _data.id }));\r\n        }\r\n    }\r\n\r\n    get id(): number {\r\n        return this._data.id;\r\n    }\r\n\r\n    get service(): ServiceItem {\r\n        return _.service.get(this._data.networkId, this._data.serviceId);\r\n    }\r\n\r\n    get data(): db.Program {\r\n        return this._data;\r\n    }\r\n\r\n    update(data: db.Program): void {\r\n\r\n        if (common.updateObject(this._data, data) === true) {\r\n            _.program.save();\r\n            Event.emit(\"program\", \"update\", this._data);\r\n        }\r\n    }\r\n\r\n    getStream(user: common.User): Promise<stream.Readable> {\r\n        return _.tuner.getProgramStream(this, user);\r\n    }\r\n\r\n    remove(): void {\r\n        _.program.remove(this);\r\n    }\r\n}"],"sourceRoot":"/source/"}