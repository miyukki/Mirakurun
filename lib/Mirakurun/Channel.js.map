{"version":3,"sources":["Mirakurun/Channel.ts"],"names":[],"mappings":"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","file":"Mirakurun/Channel.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as stream from \"stream\";\r\nimport * as common from \"./common\";\r\nimport * as log from \"./log\";\r\nimport _ from \"./_\";\r\nimport queue from \"./queue\";\r\nimport ChannelItem from \"./ChannelItem\";\r\nimport Tuner from \"./Tuner\";\r\n\r\nexport default class Channel {\r\n\r\n    private _items: ChannelItem[] = [];\r\n    private _epgGatheringInterval = _.config.server.epgGatheringInterval || 1000 * 60 * 15;\r\n\r\n    constructor() {\r\n\r\n        _.channel = this;\r\n\r\n        this._load();\r\n\r\n        setTimeout(this._epgGatherer.bind(this), 1000 * 60);\r\n    }\r\n\r\n    get items(): ChannelItem[] {\r\n        return this._items;\r\n    }\r\n\r\n    add(item: ChannelItem): void {\r\n\r\n        if (this.get(item.type, item.channel) === null) {\r\n            this._items.push(item);\r\n        }\r\n    }\r\n\r\n    get(type: common.ChannelType, channel: string): ChannelItem {\r\n\r\n        for (let i = 0, l = this._items.length; i < l; i++) {\r\n            if (this._items[i].channel === channel && this._items[i].type === type) {\r\n                return this._items[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    findByType(type: common.ChannelType): ChannelItem[] {\r\n\r\n        const items = [];\r\n\r\n        for (let i = 0, l = this._items.length; i < l; i++) {\r\n            if (this._items[i].type === type) {\r\n                items.push(this._items[i]);\r\n            }\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    private _load(): void {\r\n\r\n        log.debug(\"loading channels...\");\r\n\r\n        const channels = _.config.channels;\r\n\r\n        channels.forEach((channel, i) => {\r\n\r\n            if (typeof channel.name !== \"string\") {\r\n                log.error(\"invalid type of property `name` in channel#%d configuration\", i);\r\n                return;\r\n            }\r\n\r\n            if (channel.type !== \"GR\" && channel.type !== \"BS\" && channel.type !== \"CS\" && channel.type !== \"SKY\") {\r\n                log.error(\"invalid type of property `type` in channel#%d (%s) configuration\", i, channel.name);\r\n                return;\r\n            }\r\n\r\n            if (typeof channel.channel !== \"string\") {\r\n                log.error(\"invalid type of property `channel` in channel#%d (%s) configuration\", i, channel.name);\r\n                return;\r\n            }\r\n\r\n            if (channel.satelite && typeof channel.satelite !== \"string\") {\r\n                log.error(\"invalid type of property `satelite` in channel#%d (%s) configuration\", i, channel.name);\r\n                return;\r\n            }\r\n\r\n            if (channel.serviceId && typeof channel.serviceId !== \"number\") {\r\n                log.error(\"invalid type of property `serviceId` in channel#%d (%s) configuration\", i, channel.name);\r\n                return;\r\n            }\r\n\r\n            if (channel.isDisabled === true) {\r\n                return;\r\n            }\r\n\r\n            if (Tuner.typeExists(channel.type) === false) {\r\n                return;\r\n            }\r\n\r\n            new ChannelItem(channel);\r\n        });\r\n    }\r\n\r\n    private _epgGatherer(): void {\r\n\r\n        queue.add(() => {\r\n\r\n            const networkIds = [...new Set(_.service.items.map(item => item.networkId))];\r\n\r\n            networkIds.forEach(networkId => {\r\n\r\n                const services = _.service.findByNetworkId(networkId);\r\n\r\n                if (services.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                log.info(\"Network#%d EPG gathering has queued\", networkId);\r\n\r\n                queue.add(() => {\r\n                    return new Promise((resolve, reject) => {\r\n\r\n                        log.info(\"Network#%d EPG gathering has started\", networkId);\r\n\r\n                        Tuner.getEPG(services[0].channel)\r\n                            .then(() => {\r\n                                log.info(\"Network#%d EPG gathering has finished\", networkId);\r\n                                resolve();\r\n                            })\r\n                            .catch(error => {\r\n                                log.error(\"Network#%d EPG gathering has failed [%s]\", networkId, error);\r\n                                reject();\r\n                            });\r\n                    });\r\n                });\r\n            });\r\n\r\n            queue.add(() => {\r\n                setTimeout(this._epgGatherer.bind(this), this._epgGatheringInterval);\r\n                return Promise.resolve();\r\n            });\r\n\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    static add(item: ChannelItem): void {\r\n        return _.channel.add(item);\r\n    }\r\n\r\n    static get(type: common.ChannelType, channel: string): ChannelItem {\r\n        return _.channel.get(type, channel);\r\n    }\r\n\r\n    static findByType(type: common.ChannelType): ChannelItem[] {\r\n        return _.channel.findByType(type);\r\n    }\r\n\r\n    static all(): ChannelItem[] {\r\n        return _.channel.items;\r\n    }\r\n}"],"sourceRoot":"/source/"}