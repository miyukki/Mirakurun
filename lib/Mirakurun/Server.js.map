{"version":3,"sources":["Mirakurun/Server.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;EAcE;AACF,iDAAiD;AACjD,YAAY,CAAC;AAEb,MAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,MAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,MAAY,OAAO,WAAM,iBAAiB,CAAC,CAAA;AAC3C,MAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,MAAY,UAAU,WAAM,aAAa,CAAC,CAAA;AAC1C,MAAY,IAAI,WAAM,SAAS,CAAC,CAAA;AAChC,MAAY,GAAG,WAAM,OAAO,CAAC,CAAA;AAC7B,yBAAmB,UAAU,CAAC,CAAA;AAC9B,yBAAmB,UAAU,CAAC,CAAA;AAC9B,mBAAc,KAAK,CAAC,CAAA;AAEpB,MAAM,GAAG,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAE1C;IAII;QAFQ,aAAQ,GAAkB,EAAE,CAAC;QAIjC,MAAM,YAAY,GAAG,UAAC,CAAC,MAAM,CAAC,MAAM,CAAC;QAErC,IAAI,SAAS,GAAa,EAAE,CAAC;QAE7B,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,SAAS,GAAG,CAAC,GAAG,SAAS,EAAE,GAAG,gBAAM,CAAC,uBAAuB,EAAE,EAAE,WAAW,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;QAEtB,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE5B,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,wHAAwH,CAAC,CAAC,CAAC;QAC1I,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACpD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAE3B,GAAG,CAAC,GAAG,CAAC,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAAI;YACtD,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;YACpD,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;QAC9D,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAE/B,OAAO,CAAC,UAAU,CAAC;YACf,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,GAAG;YACX,QAAQ,EAAE,OAAO;YACjB,MAAM,EAAE,qBAAqB;SAChC,CAAC,CAAC;QAEH,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAqB,EAAE,IAAI;YAE1C,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;YAC3C,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEzB,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,KAAK,KAAK,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;oBAC7B,cAAc,EAAE,kBAAkB;iBACrC,CAAC,CAAC;YACP,CAAC;YAED,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;gBACnB,IAAI,EAAE,GAAG,CAAC,UAAU;gBACpB,MAAM,EAAE,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa;gBACxC,MAAM,EAAE,GAAG,CAAC,MAAM;aACrB,CAAC,CAAC,CAAC;YAEJ,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,OAAO,CAAC,OAAO;YAErB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAEtC,MAAM,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,YAAY;YAE5C,EAAE,CAAC,CAAC,gBAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,gBAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACnG,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,IAAI,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;oBAClE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC3B,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,GAAG,CAAC,IAAI,CAAC,6BAA6B,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC3E,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC;oBAC/B,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,EAAE;oBACtC,GAAG,CAAC,IAAI,CAAC,2BAA2B,EAAE,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;gBACtE,CAAC,CAAC,CAAC;YACP,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAED;kBAAe,MAAM,CAAC","file":"Mirakurun/Server.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as fs from \"fs\";\r\nimport * as http from \"http\";\r\nimport * as ip from \"ip\";\r\nimport * as express from \"express\";\r\nimport * as openapi from \"express-openapi\";\r\nimport * as morgan from \"morgan\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport * as yaml from \"js-yaml\";\r\nimport * as log from \"./log\";\r\nimport regexp from \"./regexp\";\r\nimport system from \"./system\";\r\nimport _ from \"./_\";\r\n\r\nconst pkg = require(\"../../package.json\");\r\n\r\nclass Server {\r\n\r\n    private _servers: http.Server[] = [];\r\n\r\n    constructor() {\r\n\r\n        const serverConfig = _.config.server;\r\n\r\n        let addresses: string[] = [];\r\n\r\n        if (serverConfig.path) {\r\n            addresses.push(serverConfig.path);\r\n        }\r\n\r\n        if (serverConfig.port) {\r\n            addresses = [...addresses, ...system.getPrivateIPv4Addresses(), \"127.0.0.1\"];\r\n        }\r\n\r\n        const app = express();\r\n\r\n        app.disable(\"x-powered-by\");\r\n\r\n        app.use(morgan(\":remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms :user-agent\"));\r\n        app.use(bodyParser.urlencoded({ extended: false }));\r\n        app.use(bodyParser.json());\r\n\r\n        app.use((req: express.Request, res: express.Response, next) => {\r\n            res.setHeader(\"Server\", \"Mirakurun/\" + pkg.version);\r\n            next();\r\n        });\r\n\r\n        const api = yaml.safeLoad(fs.readFileSync(\"api.yml\", \"utf8\"));\r\n        api.info.version = pkg.version;\r\n\r\n        openapi.initialize({\r\n            app: app,　　　　　　　　　　　　　　　\r\n            apiDoc: api,\r\n            docsPath: \"/docs\",\r\n            routes: \"./lib/Mirakurun/api\"\r\n        });\r\n\r\n        app.use((err, req, res: express.Response, next) => {\r\n\r\n            log.error(JSON.stringify(err, null, \"  \"));\r\n            console.error(err.stack);\r\n\r\n            if (res.headersSent === false) {\r\n                res.writeHead(err.status || 500, {\r\n                    \"Content-Type\": \"application/json\"\r\n                });\r\n            }\r\n\r\n            res.end(JSON.stringify({\r\n                code: res.statusCode,\r\n                reason: err.message || res.statusMessage,\r\n                errors: err.errors\r\n            }));\r\n\r\n            next();\r\n        });\r\n\r\n        addresses.forEach(address => {\r\n\r\n            const server = http.createServer(app);\r\n\r\n            server.timeout = 1000 * 60 * 3; // 3 minutes\r\n\r\n            if (regexp.unixDomainSocket.test(address) === true || regexp.windowsNamedPipe.test(address) === true) {\r\n                if (process.platform !== \"win32\" && fs.existsSync(address) === true) {\r\n                    fs.unlinkSync(address);\r\n                }\r\n\r\n                server.listen(address, () => {\r\n                    log.info(\"listening on http+unix://%s\", address.replace(/\\//g, \"%2F\"));\r\n                });\r\n\r\n                if (process.platform !== \"win32\") {\r\n                    fs.chmodSync(address, \"777\");\r\n                }\r\n            } else {\r\n                server.listen(serverConfig.port, address, () => {\r\n                    log.info(\"listening on http://%s:%d\", address, serverConfig.port);\r\n                });\r\n            }\r\n\r\n            this._servers.push(server);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Server;\r\n"],"sourceRoot":"/source/"}