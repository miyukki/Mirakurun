{"version":3,"sources":["Mirakurun/ChannelItem.ts"],"names":[],"mappings":"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","file":"Mirakurun/ChannelItem.js","sourcesContent":["/*\r\n   Copyright 2016 Yuki KAN\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n/// <reference path=\"../../typings/index.d.ts\" />\r\n\"use strict\";\r\n\r\nimport * as stream from \"stream\";\r\nimport _ from \"./_\";\r\nimport queue from \"./queue\";\r\nimport * as log from \"./log\";\r\nimport * as common from \"./common\";\r\nimport * as config from \"./config\";\r\nimport ServiceItem from \"./ServiceItem\";\r\n\r\nexport default class ChannelItem {\r\n\r\n    private _name: string;\r\n    private _type: common.ChannelType;\r\n    private _channel: string;\r\n    private _satelite: string;\r\n\r\n    constructor(config: config.Channel) {\r\n\r\n        const pre = _.channel.get(config.type, config.channel);\r\n        if (pre !== null) {\r\n            if (config.serviceId) {\r\n                pre.addService(config.serviceId);\r\n            }\r\n\r\n            return pre;\r\n        }\r\n\r\n        this._name = config.name;\r\n        this._type = config.type;\r\n        this._channel = config.channel;\r\n        this._satelite = config.satelite;\r\n\r\n        if (config.serviceId) {\r\n            this.addService(config.serviceId);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (!config.serviceId && this.getServices().length === 0) {\r\n                this.serviceScan(true);\r\n            } else {\r\n                setTimeout(() => this.serviceScan(false), 180000);\r\n            }\r\n        }, 3000);\r\n\r\n        _.channel.add(this);\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get type(): common.ChannelType {\r\n        return this._type;\r\n    }\r\n\r\n    get channel(): string {\r\n        return this._channel;\r\n    }\r\n\r\n    get satelite(): string {\r\n        return this._satelite;\r\n    }\r\n\r\n    export(): config.Channel {\r\n        return {\r\n            type: this._type,\r\n            channel: this._channel,\r\n            name: this._name,\r\n            satelite: this._satelite\r\n        };\r\n    }\r\n\r\n    addService(serviceId: number): void {\r\n\r\n        if (!_.service) {\r\n            process.nextTick(() => this.addService(serviceId));\r\n            return;\r\n        }\r\n\r\n        if (_.service.findByChannel(this).some(service => service.serviceId === serviceId) === true) {\r\n            return;\r\n        }\r\n\r\n        log.info(\"ChannelItem#'%s' serviceId=%d check has queued\", this._name, serviceId);\r\n\r\n        queue.add(() => {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                log.info(\"ChannelItem#'%s' serviceId=%d check has started\", this._name, serviceId);\r\n\r\n                _.tuner.getServices(this)\r\n                    .then(services => services.find(service => service.serviceId === serviceId))\r\n                    .then(service => {\r\n\r\n                        log.debug(\"ChannelItem#'%s' serviceId=%d: %s\", this._name, serviceId, JSON.stringify(service, null, \"  \"));\r\n\r\n                        new ServiceItem(this, service.networkId, service.serviceId, service.name, service.type, service.logoId);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(error => {\r\n\r\n                        log.info(\"ChannelItem#'%s' serviceId=%d check has failed [%s]\", this._name, serviceId, error);\r\n\r\n                        setTimeout(() => this.addService(serviceId), 180000);\r\n\r\n                        reject();\r\n                    });\r\n            });\r\n        });\r\n    }\r\n\r\n    getServices(): ServiceItem[] {\r\n        return _.service.findByChannel(this);\r\n    }\r\n\r\n    getStream(user: common.User): Promise<stream.Readable> {\r\n        return _.tuner.getChannelStream(this, user);\r\n    }\r\n\r\n    serviceScan(add: boolean): void {\r\n\r\n        log.info(\"ChannelItem#'%s' service scan has queued\", this._name);\r\n\r\n        queue.add(() => {\r\n            return new Promise((resolve, reject) => {\r\n\r\n                log.info(\"ChannelItem#'%s' service scan has started\", this._name);\r\n\r\n                _.tuner.getServices(this)\r\n                    .then(services => {\r\n\r\n                        log.debug(\"ChannelItem#'%s' services: %s\", this._name, JSON.stringify(services, null, \"  \"));\r\n\r\n                        services.forEach(service => {\r\n\r\n                            const item = _.service.get(service.networkId, service.serviceId);\r\n                            if (item !== null) {\r\n                                item.name = service.name;\r\n                                item.type = service.type;\r\n                                item.logoId = service.logoId;\r\n                            } else if (add === true) {\r\n                                new ServiceItem(\r\n                                    this,\r\n                                    service.networkId,\r\n                                    service.serviceId,\r\n                                    service.name,\r\n                                    service.type,\r\n                                    service.logoId\r\n                                );\r\n                            }\r\n                        });\r\n\r\n                        log.info(\"ChannelItem#'%s' service scan has finished\", this._name);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(error => {\r\n\r\n                        log.error(\"ChannelItem#'%s' service scan has failed [%s]\", this._name, error);\r\n\r\n                        setTimeout(() => this.serviceScan(add), add ? 180000 : 3600000);\r\n\r\n                        reject();\r\n                    });\r\n            });\r\n        });\r\n    }\r\n}"],"sourceRoot":"/source/"}