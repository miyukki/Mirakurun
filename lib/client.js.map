{"version":3,"sources":["client.ts"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["/*\n   Copyright 2016 Yuki KAN\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n/// <reference path=\"../typings/globals/node/index.d.ts\" />\n/// <reference path=\"../typings/globals/js-yaml/index.d.ts\" />\n\"use strict\";\n\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as querystring from \"querystring\";\nimport * as yaml from \"js-yaml\";\nimport * as apid from \"../api.d.ts\";\nconst pkg = require(\"../package.json\");\nconst spec = yaml.safeLoad(fs.readFileSync(__dirname + \"/../api.yml\", \"utf8\"));\n\nexport type RequestMethod = \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n\nexport interface RequestOption {\n    /** positive integer */\n    priority?: number;\n    /** request headers */\n    headers?: { [key: string]: string };\n    /** request query */\n    query?: { [key: string]: any };\n    /** request body */\n    body?: string | Object;\n}\n\nexport interface Response {\n    status: number;\n    statusText: string;\n    contentType: string;\n    headers: { [key: string]: string };\n    isSuccess: boolean;\n    body?: Object | Buffer;\n}\n\nexport interface ErrorResponse extends Response {\n    body?: apid.Error;\n}\n\nexport interface ChannelsQuery {\n    type?: apid.ChannelType;\n    channel?: string;\n    name?: string;\n}\n\nexport interface ProgramsQuery {\n    networkId?: apid.NetworkId;\n    serviceId?: apid.ServiceId;\n    eventId?: apid.EventId;\n}\n\nexport interface EventsQuery {\n    resource?: apid.EventResource;\n    type?: apid.EventType;\n}\n\nexport interface ServicesQuery {\n    serviceId?: apid.ServiceId;\n    networkId?: apid.NetworkId;\n    name?: string;\n    type?: number;\n    \"channel.type\"?: apid.ChannelType;\n    \"channel.channel\"?: string;\n}\n\nexport default class Client {\n\n    basePath = spec.basePath as string;\n    /** positive integer */\n    priority = 0;\n    host = \"\";\n    port = 40772;\n    socketPath = process.platform === \"win32\" ? \"\\\\\\\\.\\\\pipe\\\\mirakurun\" : \"/var/run/mirakurun.sock\";\n    agent: http.Agent | boolean;\n    /** provide User-Agent string to identify client. */\n    userAgent = \"\";\n\n    private _userAgent = `MirakurunClient/${pkg.version} Node/${process.version} (${process.platform})`;\n\n    constructor() {\n    }\n\n    private _httpRequest(method: RequestMethod, path: string, option: RequestOption = {}): Promise<http.IncomingMessage> {\n\n        const opt: http.RequestOptions = {\n            path: this.basePath + path,\n            headers: option.headers || {},\n            agent: this.agent\n        };\n\n        if (this.host === \"\") {\n            opt.socketPath = this.socketPath;\n        } else {\n            opt.host = this.host;\n            opt.port = this.port;\n        }\n\n        if (this.userAgent === \"\") {\n            opt.headers[\"User-Agent\"] = this._userAgent;\n        } else {\n            opt.headers[\"User-Agent\"] = this.userAgent + \" \" + this._userAgent;\n        }\n\n        if (option.priority === undefined) {\n            option.priority = this.priority;\n        }\n        opt.headers[\"X-Mirakurun-Priority\"] = option.priority.toString(10);\n\n        if (typeof option.query === \"object\") {\n            path += \"?\" + querystring.stringify(option.query);\n        }\n\n        if (typeof option.body === \"object\") {\n            opt.headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n            option.body = JSON.stringify(option.body);\n        }\n\n        return new Promise((resolve, reject) => {\n\n            const req = http.request(opt, res => {\n\n                if (res.statusCode > 300 && res.statusCode < 400 && res.headers[\"location\"]) {\n                    if (/^\\//.test(res.headers[\"location\"]) === false) {\n                        reject(new Error(`Error: Redirecting location \"${res.headers[\"location\"]}\" isn't supported.`));\n                        return;\n                    }\n                    this._httpRequest(method, res.headers[\"location\"], option)\n                        .then(resolve, reject);\n                    return;\n                }\n\n                resolve(res);\n            });\n\n            req.on(\"error\", reject);\n\n            // write request body\n            if (typeof option.body === \"string\") {\n                req.write(option.body + \"\\n\");\n            }\n            req.end();\n        });\n    }\n\n    private _requestStream(method: RequestMethod, path: string, option: RequestOption = {}): Promise<http.IncomingMessage> {\n\n        return new Promise((resolve, reject) => {\n\n            this._httpRequest(method, path, option).then(\n                res => {\n\n                    if (res.statusCode >= 200 && res.statusCode <= 202) {\n                        resolve(res);\n                    } else {\n                        reject(res);\n                    }\n                },\n                err => reject(err)\n            );\n        });\n    }\n\n    private _getTS(path: string, decode = true): Promise<http.IncomingMessage> {\n\n        const option: RequestOption = {\n            query: {\n                decode: decode ? \"1\" : \"0\"\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n\n            this._requestStream(\"GET\", path, option).then(\n                res => {\n\n                    if (res.headers[\"content-type\"] === \"video/MP2T\") {\n                        resolve(res);\n                    } else {\n                        reject(res);\n                    }\n                },\n                err => reject(err)\n            );\n        });\n    }\n\n    request(method: RequestMethod, path: string, option: RequestOption = {}): Promise<Response>|Promise<ErrorResponse> {\n\n        return new Promise((resolve, reject) => {\n\n            this._httpRequest(method, path, option).then(\n                res => {\n\n                    const ret: Response = {\n                        status: res.statusCode,\n                        statusText: res.statusMessage,\n                        contentType: res.headers[\"content-type\"].split(\";\")[0],\n                        headers: res.headers,\n                        isSuccess: (res.statusCode >= 200 && res.statusCode <= 202)\n                    };\n\n                    const chunks: Buffer[] = [];\n\n                    res.on(\"data\", chunk => chunks.push(chunk));\n                    res.on(\"end\", () => {\n\n                        const buffer = Buffer.concat(chunks);\n\n                        if (ret.contentType === \"application/json\") {\n                            ret.body = JSON.parse(buffer.toString(\"utf8\"));\n                        } else {\n                            ret.body = buffer;\n                        }\n\n                        if (ret.isSuccess === true) {\n                            resolve(ret);\n                        } else {\n                            reject(ret);\n                        }\n                    });\n                },\n                err => {\n\n                    const ret: Response = {\n                        status: -1,\n                        statusText: \"Request Failure\",\n                        contentType: \"\",\n                        headers: {},\n                        isSuccess: false,\n                        body: err\n                    };\n\n                    reject(ret);\n                }\n            );\n        });\n    }\n\n    getChannels(query?: ChannelsQuery): Promise<apid.Channel[]> {\n\n        return this.request(\"GET\", \"/channels\", { query: query })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getChannelsByType(type: apid.ChannelType, query?: ChannelsQuery): Promise<apid.Channel[]> {\n\n        return this.request(\"GET\", `/channels/${type}`, { query: query })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getChannel(type: apid.ChannelType, channel: string): Promise<apid.Channel> {\n\n        return this.request(\"GET\", `/channels/${type}/${channel}`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getServicesByChannel(type: apid.ChannelType, channel: string): Promise<apid.Service[]> {\n\n        return this.request(\"GET\", `/channels/${type}/${channel}/services`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getServiceByChannel(type: apid.ChannelType, channel: string, sid: apid.ServiceId): Promise<apid.Service> {\n\n        return this.request(\"GET\", `/channels/${type}/${channel}/services/${sid}`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getServiceStreamByChannel(type: apid.ChannelType, channel: string, sid: apid.ServiceId, decode?: boolean): Promise<http.IncomingMessage> {\n\n        return this._getTS(`/channels/${type}/${channel}/services/${sid}/stream`, decode)\n                   .then(res => Promise.resolve(res));\n    }\n\n    getChannelStream(type: apid.ChannelType, channel: string, decode?: boolean): Promise<http.IncomingMessage> {\n\n        return this._getTS(`/channels/${type}/${channel}/stream`, decode)\n                   .then(res => Promise.resolve(res));\n    }\n\n    getPrograms(query?: ProgramsQuery): Promise<apid.Program[]> {\n\n        return this.request(\"GET\", \"/programs\", { query: query })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getProgram(id: apid.ProgramId): Promise<apid.Program> {\n\n        return this.request(\"GET\", `/programs/${id}`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getProgramStream(id: apid.ProgramId, decode?: boolean): Promise<http.IncomingMessage> {\n\n        return this._getTS(`/programs/${id}/stream`, decode)\n                   .then(res => Promise.resolve(res));\n    }\n\n    getServices(query?: ServicesQuery): Promise<apid.Service[]> {\n\n        return this.request(\"GET\", \"/services\", { query: query })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getService(id: apid.ServiceItemId): Promise<apid.Service> {\n\n        return this.request(\"GET\", `/services/${id}`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getLogoImage(id: apid.ServiceItemId): Promise<Buffer> {\n\n        return this.request(\"GET\", `/services/${id}/logo`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getServiceStream(id: apid.ServiceItemId, decode?: boolean): Promise<http.IncomingMessage> {\n\n        return this._getTS(`/services/${id}/stream`, decode)\n                   .then(res => Promise.resolve(res));\n    }\n\n    getTuners(): Promise<apid.TunerDevice[]> {\n\n        return this.request(\"GET\", \"/tuners\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getTuner(index: number): Promise<apid.TunerDevice> {\n\n        return this.request(\"GET\", `/tuners/${index}`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getTunerProcess(index: number): Promise<apid.TunerProcess> {\n\n        return this.request(\"GET\", `/tuners/${index}/process`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    killTunerProcess(index: number): Promise<apid.TunerProcess> {\n\n        return this.request(\"DELETE\", `/tuners/${index}/process`)\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getEvents(): Promise<apid.Event[]> {\n\n        return this.request(\"GET\", \"/events\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getEventsStream(query?: EventsQuery): Promise<http.IncomingMessage> {\n\n        return this._requestStream(\"GET\", \"/events/stream\", { query: query })\n                   .then(res => Promise.resolve(res));\n    }\n\n    getChannelsConfig(): Promise<apid.ConfigChannels> {\n\n        return this.request(\"GET\", \"/config/channels\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    updateChannelsConfig(channels: apid.ConfigChannels): Promise<apid.ConfigChannels> {\n\n        return this.request(\"PUT\", \"/config/channels\", { body: channels })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getServerConfig(): Promise<apid.ConfigServer> {\n\n        return this.request(\"GET\", \"/config/server\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    updateServerConfig(server: apid.ConfigServer): Promise<apid.ConfigServer> {\n\n        return this.request(\"PUT\", \"/config/server\", { body: server })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getTunersConfig(): Promise<apid.ConfigTuners> {\n\n        return this.request(\"GET\", \"/config/tuners\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    updateTunersConfig(tuners: apid.ConfigTuners): Promise<apid.ConfigTuners> {\n\n        return this.request(\"PUT\", \"/config/tuners\", { body: tuners })\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getLog(): Promise<string> {\n\n        return this.request(\"GET\", \"/log\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    getLogStream(): Promise<http.IncomingMessage> {\n\n        return this._requestStream(\"GET\", \"/log/stream\")\n                   .then(res => Promise.resolve(res));\n    }\n\n    checkVersion(): Promise<apid.Version> {\n\n        return this.request(\"GET\", \"/version\")\n                   .then(res => Promise.resolve(res.body));\n    }\n\n    updateVersion(force?: boolean): Promise<http.IncomingMessage> {\n\n        return this._requestStream(\"PUT\", \"/log/stream\", { query: { force: force } })\n                   .then(res => Promise.resolve(res));\n    }\n\n    getStatus(): Promise<apid.Status> {\n\n        return this.request(\"GET\", \"/status\")\n                   .then(res => Promise.resolve(res.body));\n    }\n}"],"sourceRoot":"/source/"}